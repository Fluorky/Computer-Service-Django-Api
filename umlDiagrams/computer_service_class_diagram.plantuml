@startuml

abstract class models.Model {
}

abstract class BasicInfo {
  + name: String
}
abstract class django.contrib.auth.models.AbstractUser{

    +username : CharField
    +first_name : CharField
    +last_name : CharField
    +email : EmailField
    +is_staff : BooleanField
    +is_active : BooleanField
    +date_joined : DateTimeField
    +address: Address
    +get_full_name(self)
    +get_short_name(self)
    +email_user(self, subject, message, from_email=None, **kwargs)
}
abstract class CommonInfo {
  + price: Integer
  + tax: Double
}

class ServiceRequest {
  + description: String
  + requested_by: Customer
  + assigned_technician: ServiceTechnician
  + status: String
  + requested_at: DateTime
  + completion_deadline: DateTime
  + priority: Integer
  + repairLogs: List<RepairLog>
  + parts: List<Part>
  + maintenance_services: List <MaintenanceService>
  + def __str__(self) : constructor
  + assign_technician(technician: ServiceTechnician)
  + complete_service()
  + escalate_priority()
  + generate_invoice()
  + add_repairLog(repairLog: repairLog)
  + (REST API):
  + class ServiceRequestListCreateAPIView(generics.ListCreateAPIView): view or create service_request
  + class ServiceRequestDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete service_request
  + class ServiceRequestListAPIView(generics.ListAPIView): view list of service_requests
  + class ServiceRequestDetailAPIView(generics.RetrieveAPIView): retrieve service_request
}

class Invoice {
  + total_amount: Decimal
  + payment_status: Boolean
  + service_requests: List<ServiceRequest>
  + billing_address: Address
  + shipping_address: Address
  + customer : Customer
  + def __str__(self) : constructor
  + calculate_total_amount_tax(List<Part>, List <MaintenanceService>)
  + calculate_total_amount(List<Part>, List <MaintenanceService>)
  + send_invoice_email()
  + mark_as_paid()
  + get_customer_data()
  + (REST API):
  + class InvoiceListCreateAPIView(generics.ListCreateAPIView): view or create invoice
  + class InvoiceDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete invoice
  + class InvoiceListAPIView(generics.ListAPIView): view list of invoices
  + class InvoiceDetailAPIView(generics.RetrieveAPIView): retrieve invoice
}

class Part {
  + description: String
  + quantity_in_stock: Integer
  + supplier: Supplier
  + def __str__(self) : constructor
  + (REST API):
  + class PartListCreateAPIView(generics.ListCreateAPIView): view or create part
  + class PartDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete part
  + class PartListAPIView(generics.ListAPIView): view list of parts
  + class PartDetailAPIView(generics.RetrieveAPIView): retrieve part
}

class Supplier {
  + name: String
  + contact_person: django.contrib.auth.models.AbstractUser
  + (REST API):
  + class SupplierListCreateAPIView(generics.ListCreateAPIView): view or create supplier
  + class SupplierDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete supplier
  + class SupplierListAPIView(generics.ListAPIView): view list of suppliers
  + class SupplierDetailAPIView(generics.RetrieveAPIView): retrieve supplier
}

class ServiceTechnician {
  + is_superuser : Boolean - False
  + specialization: String
  + assigned_requests: List<ServiceRequest>
  + def __str__(self) : constructor
  + generate_repair_log(service_request: ServiceRequest)
  + view_service_request(service_request: ServiceRequest)
  + update_service_request(service_request: ServiceRequest)
  + (REST API):
  + class ServiceTechnicianListCreateAPIView(generics.ListCreateAPIView): view or create service_technician
  + class ServiceTechnicianDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete service_technician
  + class ServiceTechnicianListAPIView(generics.ListAPIView): view list of service_technicians
  + class ServiceTechnicianDetailAPIView(generics.RetrieveAPIView): retrieve service_technician
}

class Customer {
  + service_requests: List<ServiceRequest>
  + def __str__(self) : constructor
  + place_service_request(request: ServiceRequest)
  + view_history()
  + (REST API):
  + class CustomerListCreateAPIView(generics.ListCreateAPIView): view or create customer
  + class CustomerDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete customer
  + class CustomerListAPIView(generics.ListAPIView): view list of customers
  + class CustomerDetailAPIView(generics.RetrieveAPIView): retrieve customer
}

class Manager {
  + is_superuser : Boolean - True
  + def __str__(self) : constructor
  + assign_technician(service_request: ServiceRequest, technician: ServiceTechnician)
  + generate_invoice(service_request: ServiceRequest)
  + escalate_service_request(service_request: ServiceRequest)
  + handle_parts(service_request: ServiceRequest)
  + delete_service_request(service_request: ServiceRequest)
  + (REST API):
  + class ManagerListCreateAPIView(generics.ListCreateAPIView): view or create admin
  + class ManagerDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete admin
  + class ManagerListAPIView(generics.ListAPIView): view list of admins
  + class ManagerDetailAPIView(generics.RetrieveAPIView): retrieve admin
}

class RepairLog {
  + text: String
  + posted_by: ServiceTechnician
  + posted_at: DateTime
  + start_time : DateTime
  + end_time : DateTime
  + serviceRequest : ServiceRequest
  + technician_notes: String
  + def __str__(self) : constructor
  + (REST API):
  + class RepairLogListCreateAPIView(generics.ListCreateAPIView): view or create repair_log
  + class RepairLogDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete repair_log
  + class RepairLogListAPIView(generics.ListAPIView): view list of repair_logs
  + class RepairLogDetailAPIView(generics.RetrieveAPIView): retrieve repair_log
}

class Warehouse {
  + quantity_to_order : Integer
  + last_one_order : DateTime
  + parts_in_stock: List<Part>
  + def __str__(self) : constructor
  + (REST API):
  + class WarehouseListCreateAPIView(generics.ListCreateAPIView): view or create warehouse
  + class WarehouseDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete warehouse
  + class WarehouseListAPIView(generics.ListAPIView): view list of warehouses
  + class WarehouseDetailAPIView(generics.RetrieveAPIView): retrieve warehouse
}

class Address {
  + address_line1: String
  + address_line2: String
  + postal_code: String
  + city: String
  + state: String
  + country: String
  + (REST API):
  + class AddressListCreateAPIView(generics.ListCreateAPIView): view or create address
  + class AddressDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete address
  + class AddressListAPIView(generics.ListAPIView): view list of addresses
  + class AddressDetailAPIView(generics.RetrieveAPIView): retrieve address
}

class MaintenanceService{
  + description: String
  + def __str__(self) : constructor
  + (REST API):
  + class MaintenanceServiceListCreateAPIView(generics.ListCreateAPIView): view or create maintenance service
  + class MaintenanceServiceDetailUpdateDeleteAPIView(generics.RetrieveUpdateDestroyAPIView): retrieve or update or delete maintenance services
  + class MaintenanceServiceListAPIView(generics.ListAPIView): view list of maintenance services
  + class MaintenanceServiceDetailAPIView(generics.RetrieveAPIView): retrieve maintenance services
}

models.Model <|-- BasicInfo
BasicInfo <|-- CommonInfo
BasicInfo <|-- RepairLog
BasicInfo <|-- Invoice
CommonInfo <|--  ServiceRequest
CommonInfo <|-- Part
CommonInfo <|-- MaintenanceService
ServiceRequest *--> Invoice
ServiceRequest *-- Customer : requested_by
ServiceRequest *-- ServiceTechnician : owned_by
Invoice <--* MaintenanceService
Invoice <--* Part
Part -- Supplier
django.contrib.auth.models.AbstractUser  -- Address
django.contrib.auth.models.AbstractUser <|-- ServiceTechnician
django.contrib.auth.models.AbstractUser <|-- Customer
ServiceRequest "repairLogs" *-- "1"  RepairLog
Part -- Warehouse
ServiceTechnician <|-- Manager 
Manager *-- ServiceRequest : Handles
ServiceTechnician *-- RepairLog : Handles
ServiceTechnician *-- ServiceRequest : Manages
Supplier -- django.contrib.auth.models.AbstractUser
Invoice -- Customer
Invoice -- Address : billing_address
Invoice -- Address : shipping_address

@enduml
