@startuml

abstract class models.Model {
}

abstract class BasicInfo {
  + name: String
}

abstract class CommonInfo {
  + name: String
  + price: Integer
  + tax: Double
}

class Person {
  + name: String
  + surname: String
  + email: Email
  + phone_number: String
  + address: Address
}

class ServiceRequest {
  + description: String
  + requested_by: Customer
  + assigned_technician: ServiceTechnician
  + status: String
  + requested_at: DateTime
  + completion_deadline: DateTime
  + priority: Integer
  + comments: List<Comment>
  + billing_address: Address
  + shipping_address: Address
  + def __str__(self) : constructor
  + assign_technician(technician: ServiceTechnician)
  + complete_service()
  + escalate_priority()
  + generate_invoice()
  + add_comment(comment: Comment)
}

class Comment {
  + text: String
  + posted_by: Person
  + posted_at: DateTime
}

class Invoice {
  + total_amount: Decimal
  + payment_status: Boolean
  + service_requests: List<ServiceRequest>
  + parts: List<Part>
  + billing_address: Address
  + shipping_address: Address
  + def __str__(self) : constructor
  + calculate_total_amount_tax()
  + calculate_total_amount()
  + send_invoice_email()
  + mark_as_paid()
}

class Part {
  + description: String
  + quantity_in_stock: Integer
  + supplier: Supplier
  + def __str__(self) : constructor
}

class Supplier {
  + name: String
  + contact_person: Person
  + address: Address
  + phone_number: String
}

class ServiceTechnician {
  + specialization: String
  + assigned_requests: List<ServiceRequest>
  + address: Address
  + def __str__(self) : constructor
}

class Customer {
  + address: Address
  + service_requests: List<ServiceRequest>
  + def __str__(self) : constructor
  + place_service_request(request: ServiceRequest)
  + view_history()
}

class Admin {
  + address: Address
  + username: String
  + password: String
  + def __str__(self) : constructor
  + assign_technician(service_request: ServiceRequest, technician: ServiceTechnician)
  + generate_invoice(service_request: ServiceRequest)
  + escalate_service_request(service_request: ServiceRequest)
  + handle_parts(service_request: ServiceRequest)
  + generate_repair_log(service_request: ServiceRequest)
  + view_service_request(service_request: ServiceRequest)
  + update_service_request(service_request: ServiceRequest)
  + delete_service_request(service_request: ServiceRequest)
}

class RepairLog {
  + start_time : DateTime
  + end_time : DateTime
  + serviceRequest : ServiceRequest
  + technician_notes: String
  + def __str__(self) : constructor
  + add_repair_log()
  + edit_repair_log()
  + view_repair_log()
  + delete_repair_log()
}

class Warehouse {
  + quantity_to_order : Integer
  + last_one_order : DateTime
  + parts_in_stock: List<Part>
  + def __str__(self) : constructor
  + add_warehouse()
  + edit_warehouse()
  + view_warehouse()
  + delete_warehouse()
}

class Address {
  + address_line1: String
  + address_line2: String
  + postal_code: String
  + city: String
  + state: String
  + country: String
}

models.Model --|> BasicInfo
BasicInfo --|> CommonInfo
models.Model --|> Person
models.Model --|> RepairLog
CommonInfo --|>  ServiceRequest
CommonInfo --|> Part

BasicInfo --|> Invoice
ServiceRequest *--> Invoice
ServiceRequest *-- Customer : requested_by
ServiceRequest *-- ServiceTechnician : owned_by
Invoice <--* Part
Part -- Supplier
Person --|> ServiceTechnician
Person --|> Customer
ServiceRequest -- RepairLog
Part --|> Warehouse
ServiceRequest "comments" *-- "1" Comment
ServiceTechnician --|> Admin 
Admin *-- ServiceRequest : Handles
ServiceTechnician *-- ServiceRequest : Manages
Customer -- Address
Admin -- Address
ServiceTechnician -- Address
Supplier -- Address
ServiceRequest -- Address : billing_address
ServiceRequest -- Address : shipping_address
Invoice -- Address : billing_address
Invoice -- Address : shipping_address

@enduml
